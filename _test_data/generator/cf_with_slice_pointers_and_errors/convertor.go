// Code generated by datamapper.
// https://github.com/underbek/datamapper

// Package cf_with_slice_pointers_and_errors is a generated datamapper package.
package cf_with_slice_pointers_and_errors

import (
	"fmt"

	"github.com/shopspring/decimal"
	"github.com/underbek/datamapper/_test_data/generator/cf_with_slice_pointers_and_errors/cf"
)

// ConvertFromToTo convert From by tag map to To by tag map
func ConvertFromToTo(from From) (To, error) {
	fromIDs := make([]*int, 0, len(from.IDs))
	for _, item := range from.IDs {
		res, err := cf.ConvertDecimalToInt(item)
		if err != nil {
			return To{}, err
		}

		fromIDs = append(fromIDs, &res)
	}

	fromAges := make([]int, 0, len(from.Ages))
	for _, item := range from.Ages {
		if item == nil {
			return To{}, fmt.Errorf("cannot convert From.Ages -> To.Ages, field is nil")
		}

		res, err := cf.ConvertDecimalToInt(*item)
		if err != nil {
			return To{}, err
		}

		fromAges = append(fromAges, res)
	}

	fromCounts := make([]*decimal.Decimal, 0, len(from.Counts))
	for _, item := range from.Counts {
		var resPtr *decimal.Decimal
		if item != nil {
			res, err := cf.ConvertIntegerToDecimal(*item)
			if err != nil {
				return To{}, err
			}

			resPtr = &res
		}

		fromCounts = append(fromCounts, resPtr)
	}

	fromOrigins := make([]*decimal.Decimal, 0, len(from.Origins))
	for _, item := range from.Origins {
		res, err := cf.ConvertFloatPtrToDecimalPtr(item)
		if err != nil {
			return To{}, err
		}

		fromOrigins = append(fromOrigins, res)
	}

	return To{
		UUIDs:   fromIDs,
		Ages:    fromAges,
		Counts:  fromCounts,
		Origins: fromOrigins,
	}, nil
}

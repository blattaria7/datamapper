// Code generated by datamapper.
// https://github.com/underbek/datamapper

// Package mapper is a generated datamapper package.
package mapper

import (
	"errors"
	"fmt"

	f "github.com/underbek/datamapper/_test_data/mapper/recursive/from"
	t "github.com/underbek/datamapper/_test_data/mapper/recursive/to"
	"github.com/underbek/datamapper/converts"
)

// ConvertFOrderToTOrder convert f.Order by tag recursive to t.Order by tag recursive
func ConvertFOrderToTOrder(from f.Order) (t.Order, error) {
	fromUser, err := ConvertFUserToTUser(from.User)
	if err != nil {
		return t.Order{}, fmt.Errorf("convert Order.User -> Order.User failed: %w", err)
	}

	fromOperations := make([]*t.Operation, 0, len(from.Operations))
	for _, item := range from.Operations {
		res := ConvertFOperationToTOperation(item)

		fromOperations = append(fromOperations, &res)
	}

	return t.Order{
		ID:         converts.ConvertOrderedToOrdered[int64, int](from.ID),
		User:       fromUser,
		Operations: fromOperations,
	}, nil
}

// ConvertTOrderToFOrder convert t.Order by tag recursive to f.Order by tag recursive
func ConvertTOrderToFOrder(from t.Order) (f.Order, error) {
	fromUser, err := ConvertTUserToFUser(from.User)
	if err != nil {
		return f.Order{}, fmt.Errorf("convert Order.User -> Order.User failed: %w", err)
	}

	fromOperations := make([]f.Operation, 0, len(from.Operations))
	for _, item := range from.Operations {
		if item == nil {
			return f.Order{}, errors.New("cannot convert t.Order.Operations -> f.Order.Operations, field is nil")
		}

		fromOperations = append(fromOperations, ConvertTOperationToFOperation(*item))
	}

	return f.Order{
		ID:         converts.ConvertOrderedToOrdered[int, int64](from.ID),
		User:       fromUser,
		Operations: fromOperations,
	}, nil
}
